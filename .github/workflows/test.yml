name: "Build luci-app-igmpproxy (multi-sdk: snapshot & 23.05)"


on:
  workflow_dispatch:

permissions:
  contents: write

env:
  PACKAGE_NAME: luci-app-igmpproxy

jobs:
  # Snapshot build for qualcommax/ipq60xx (produces apk/ipk if available)
  build_snapshot_ipq60xx:
    runs-on: ubuntu-latest
    name: Build (OpenWrt Snapshots - qualcommax/ipq60xx)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies (snapshot)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential ccache fastjar file g++ gawk gettext git libelf-dev \
            libncurses5-dev libncursesw5-dev libssl-dev python3 python3-pip \
            python3-setuptools rsync unzip wget zlib1g-dev xz-utils zstd

      - name: Download OpenWrt Snapshot SDK (qualcommax/ipq60xx)
        run: |
          SDK_URL="https://mirror-03.infra.openwrt.org/snapshots/targets/qualcommax/ipq60xx/openwrt-sdk-qualcommax-ipq60xx_gcc-14.3.0_musl.Linux-x86_64.tar.zst"
          wget -q --show-progress "$SDK_URL"
          tar -I zstd -xf $(basename "$SDK_URL")
          mv openwrt-sdk-qualcommax-ipq60xx_gcc-14.3.0_musl.Linux-x86_64 openwrt-sdk

      - name: Prepare package into SDK (snapshot)
        run: |
          mkdir -p openwrt-sdk/package/${PACKAGE_NAME}
          rsync -av --delete \
            --exclude 'openwrt-sdk' \
            --exclude '.git' \
            --exclude 'bin' \
            --exclude '.github/workflows' \
            --exclude '*.tar.zst' \
            ./ openwrt-sdk/package/${PACKAGE_NAME}/

      - name: Build package (snapshot)
        working-directory: openwrt-sdk
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig
          make package/${PACKAGE_NAME}/compile V=s || true
          # 调试：确认文件生成路径
          echo "=== find matching packages ==="
          find bin/packages -name "${PACKAGE_NAME}*" -ls || true
          echo "=== list bin/packages dirs ==="
          ls -la bin/packages || true

      - name: Upload snapshot artifact (apk/ipk)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-packages
          path: |
            openwrt-sdk/bin/packages/**/${PACKAGE_NAME}*.apk
            openwrt-sdk/bin/packages/**/${PACKAGE_NAME}*.ipk
            openwrt-sdk/bin/packages/**/luci-i18n-igmpproxy-zh-cn_*.apk
            openwrt-sdk/bin/packages/**/luci-i18n-igmpproxy-zh-cn_*.ipk
          if-no-files-found: warn

  # Build for OpenWrt 23.05 (mediatek/filogic)
  build_23_mediatek:
    runs-on: ubuntu-latest
    name: Build (OpenWrt 23.05.0 - mediatek/filogic)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies (23.05)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential ccache fastjar file g++ gawk gettext git libelf-dev \
            libncurses5-dev libncursesw5-dev libssl-dev python3 python3-pip \
            python3-setuptools rsync unzip wget zlib1g-dev xz-utils

      - name: Download OpenWrt SDK (23.05 mediatek/filogic)
        run: |
          SDK_URL="https://downloads.openwrt.org/releases/23.05.0/targets/mediatek/filogic/openwrt-sdk-23.05.0-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          wget -q --show-progress "$SDK_URL"
          tar -xJf $(basename "$SDK_URL")
          mv openwrt-sdk-23.05.0-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64 openwrt-sdk

      - name: Prepare package into SDK (23.05)
        run: |
          mkdir -p openwrt-sdk/package/${PACKAGE_NAME}
          rsync -av --delete \
            --exclude 'openwrt-sdk' \
            --exclude '.git' \
            --exclude 'bin' \
            --exclude '.github/workflows' \
            --exclude '*.tar.xz' \
            ./ openwrt-sdk/package/${PACKAGE_NAME}/

      - name: Build IPK (23.05)
        working-directory: openwrt-sdk
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig
          make package/${PACKAGE_NAME}/compile V=s || true
          echo "=== find matching packages ==="
          find bin/packages -name "${PACKAGE_NAME}*" -ls || true
          echo "=== list bin/packages dirs ==="
          ls -la bin/packages || true

      - name: Upload 23.05 artifact (ipk/apk)
        uses: actions/upload-artifact@v4
        with:
          name: release-packages-23.05
          path: |
            openwrt-sdk/bin/packages/**/${PACKAGE_NAME}*.ipk
            openwrt-sdk/bin/packages/**/${PACKAGE_NAME}*.apk
            openwrt-sdk/bin/packages/**/luci-i18n-igmpproxy-zh-cn_*.ipk
            openwrt-sdk/bin/packages/**/luci-i18n-igmpproxy-zh-cn_*.apk
          if-no-files-found: warn

  # Final job: collect artifacts, create tag, and publish Release
  release:
    name: Publish Release (collect artifacts & create tag)
    runs-on: ubuntu-latest
    needs:
      - build_snapshot_ipq60xx
      - build_23_mediatek
    steps:
      - name: Download snapshot artifacts
        uses: actions/download-artifact@v4
        with:
          name: snapshot-packages
          path: ./artifacts/snapshot || true

      - name: Download 23.05 artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-packages-23.05
          path: ./artifacts/23.05 || true

      - name: Show downloaded artifacts (debug)
        run: |
          echo "=== artifacts/snapshot ==="
          ls -la artifacts/snapshot || true
          echo "=== artifacts/23.05 ==="
          ls -la artifacts/23.05 || true

      - name: Setup Git identity (for tagging)
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create a timestamp tag and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # create a timestamp tag
          TAG="v$(date +'%Y.%m.%d-%H%M')"
          echo "Creating tag $TAG"
          git tag "$TAG"
          git push origin "$TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Prepare files list for release
        id: prep
        run: |
          mkdir -p release-files
          # copy anything that looks like apk/ipk from downloaded artifact dirs
          find artifacts -type f \( -iname "*.apk" -o -iname "*.ipk" \) -exec cp {} release-files/ \; || true
          echo "Copied files:"
          ls -la release-files || true
          # produce a newline-separated file list for action input (softprops accepts globs, but we will reference release-files/*)
          FILES="$(ls -1 release-files || true)"
          echo "::set-output name=files::$FILES"

      - name: Create GitHub Release and upload files
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          files: release-files/*
          overwrite_files: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Confirm release created (debug)
        run: |
          echo "Release for tag $TAG should be created (if push succeeded)."

